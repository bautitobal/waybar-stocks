package fetcher

import (
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"time"
)

type Quote struct {
	Symbol string
	Price  float64
	Change float64
}

func GetQuote(symbol string) (*Quote, error) {
	url := fmt.Sprintf("https://query1.finance.yahoo.com/v8/finance/chart/%s", symbol)

	client := &http.Client{Timeout: 10 * time.Second}
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return nil, err
	}

	req.Header.Set("User-Agent", "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0 Safari/537.36")

	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	if resp.StatusCode != 200 {
		return nil, fmt.Errorf("HTTP %d while fetching %s", resp.StatusCode, symbol)
	}

	var data map[string]interface{}
	if err := json.NewDecoder(resp.Body).Decode(&data); err != nil {
		return nil, fmt.Errorf("error parsing JSON: %v", err)
	}

	chart, ok := data["chart"].(map[string]interface{})
	if !ok {
		return nil, errors.New("invalid JSON structure (chart)")
	}

	results, ok := chart["result"].([]interface{})
	if !ok || len(results) == 0 {
		return nil, errors.New("no valid results")
	}

	meta := results[0].(map[string]interface{})["meta"].(map[string]interface{})
	price, _ := meta["regularMarketPrice"].(float64)
	change, _ := meta["regularMarketChangePercent"].(float64)

	return &Quote{
		Symbol: symbol,
		Price:  price,
		Change: change,
	}, nil
}

